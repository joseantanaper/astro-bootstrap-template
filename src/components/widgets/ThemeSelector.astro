---
import { globalService } from '@service/global.ts'

enum Themes {
  THEME_LIGHT = 'light',
  THEME_DARK = 'dark',
  THEME_SYSTEM = 'system'
}

enum BtnName {
  BUTTON_LIGHT = 'app-btn-light',
  BUTTON_DARK = 'app-btn-dark',
  BUTTON_SYSTEM = 'app-btn-system'
}

interface Props {
  outline?: boolean
  label?: boolean
}

const { outline = false, label = false } = Astro.props
---

<astro-theme-selector>
  <div class="btn-group">
    <button
      aria-describedby="tooltip"
      name={BtnName.BUTTON_LIGHT}
      class=`btn btn-${outline ? 'outline-' : ''}secondary`
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="bi bi-sun"
        viewBox="0 0 16 16"
      >
        <path
          d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6m0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8M8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0m0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13m8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5M3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8m10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0m-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0m9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707M4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708"
        ></path>
      </svg>
      {label ? <span>Light</span> : null}
    </button>

    <button
      name={BtnName.BUTTON_DARK}
      class=`btn btn-${outline ? 'outline-' : ''}secondary`
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="bi bi-moon"
        viewBox="0 0 16 16"
      >
        <path
          d="M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278M4.858 1.311A7.27 7.27 0 0 0 1.025 7.71c0 4.02 3.279 7.276 7.319 7.276a7.32 7.32 0 0 0 5.205-2.162q-.506.063-1.029.063c-4.61 0-8.343-3.714-8.343-8.29 0-1.167.242-2.278.681-3.286"
        ></path>
      </svg>
      {label ? <span>Dark</span> : null}
    </button>
    <button
      name={BtnName.BUTTON_SYSTEM}
      class=`btn btn-${outline ? 'outline-' : ''}secondary`
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="bi bi-stars"
        viewBox="0 0 16 16"
      >
        <path
          d="M7.657 6.247c.11-.33.576-.33.686 0l.645 1.937a2.89 2.89 0 0 0 1.829 1.828l1.936.645c.33.11.33.576 0 .686l-1.937.645a2.89 2.89 0 0 0-1.828 1.829l-.645 1.936a.361.361 0 0 1-.686 0l-.645-1.937a2.89 2.89 0 0 0-1.828-1.828l-1.937-.645a.361.361 0 0 1 0-.686l1.937-.645a2.89 2.89 0 0 0 1.828-1.828zM3.794 1.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387A1.73 1.73 0 0 0 4.593 5.69l-.387 1.162a.217.217 0 0 1-.412 0L3.407 5.69A1.73 1.73 0 0 0 2.31 4.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387A1.73 1.73 0 0 0 3.407 2.31zM10.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.16 1.16 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.16 1.16 0 0 0-.732-.732L9.1 2.137a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732z"
        ></path>
      </svg>
      {label ? <span>System</span> : null}
    </button>
  </div>
</astro-theme-selector>

<script>
  import { globalService } from '@/src/service/global'

  // Web Component way
  class AstroThemeSelector extends HTMLElement {
    constructor() {
      super()

      console.log('ThemeSelector', 'constructor')

      const btnLight = this.querySelector('button[name="app-btn-light"]')
      const btnDark = this.querySelector('button[name="app-btn-dark"]')
      const btnSystem = this.querySelector('button[name="app-btn-system"]')

      const setTheme = (theme: string, storeTheme?: string) => {
        document.documentElement.setAttribute('data-bs-theme', theme)
        globalService.storeTheme(storeTheme ?? theme)
        disableButtons(storeTheme ?? theme)
      }

      btnLight?.addEventListener('click', () => {
        setTheme('light')
      })
      btnDark?.addEventListener('click', () => {
        setTheme('dark')
      })
      btnSystem?.addEventListener('click', () => {
        const mql = window.matchMedia('(prefers-color-scheme: dark)')
        const osTheme = mql.matches ? 'dark' : 'light'
        setTheme(osTheme, 'system')
      })
    }
  }

  // Tell the browser to use our AstroThemeSelector class for <astro-theme-selector> elements.
  customElements.define('astro-theme-selector', AstroThemeSelector)

  const disableButtons = (theme?: string) => {
    // Global for all ThemeSelector instances
    const storedTheme = globalService.getStoredTheme()
    document
      .querySelectorAll('button[name="app-btn-light"]')
      .forEach((button) => {
        if (storedTheme === 'light') {
          button.setAttribute('disabled', 'true')
        } else {
          button.removeAttribute('disabled')
        }
      })
    document
      .querySelectorAll('button[name="app-btn-dark"]')
      .forEach((button) => {
        if (storedTheme === 'dark') {
          button.setAttribute('disabled', 'true')
        } else {
          button.removeAttribute('disabled')
        }
      })
    document
      .querySelectorAll('button[nameb="app-btn-system"]')
      .forEach((button) => {
        if (storedTheme === 'system') {
          button.setAttribute('disabled', 'true')
        } else {
          button.removeAttribute('disabled')
        }
      })
  }

  document.addEventListener('astro:page-load', () => {
    console.log('ThemeSelector:astro:page-load')
    // eventHandling()
    disableButtons()
  })
</script>
