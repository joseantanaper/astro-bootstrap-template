---
import '@style/custom.scss'

import { ViewTransitions, fade } from 'astro:transitions'
import Navbar from '@components/Navbar.astro'
import Subnavbar from '@components/Subnavbar.astro'

const base = import.meta.env.BASE_URL
//const pathname = new URL(Astro.url).pathname.replace(/^\/+/, '').replace(/\/+$/, '')
const pathname = new URL(Astro.url).pathname
  .replace(base, '')
  .replace(/\/+$/, '')
const currentPath = pathname.substring(pathname.lastIndexOf('/') + 1)
const storedTheme = null
// const storedTheme = Astro.cookies.get('theme')?.value

interface Props {
  title?: string
  subtitle?: string
  details?: string
}

const { title, subtitle } = Astro.props
---

<!doctype html>
<html
  lang="en"
  data-bs-theme={storedTheme}
  transition:animate={fade({ duration: '100ms' })}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="./favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} : {subtitle}</title>
    <ViewTransitions />
  </head>
  <body>
    <Navbar title="Astro Bootstrap Template" />
    <Subnavbar title={title} subtitle={subtitle} />
    <slot />

    <script src="../../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"
    ></script>

    <script>
      console.log('Layout')

      const themeCheck = () => {
        // OS Theme
        const mql = window.matchMedia('(prefers-color-scheme: dark)')
        const osTheme = mql.matches ? 'dark' : 'light'
        const storedTheme = localStorage.getItem('theme')
        if (!storedTheme) localStorage.setItem('theme', 'system')
        const currentTheme = localStorage.getItem('theme')
        const newTheme = (currentTheme === 'system' ? osTheme : currentTheme)!
        document.documentElement.setAttribute('data-bs-theme', newTheme)

        mql.addEventListener('change', (e) => {
          document.documentElement.setAttribute(
            'data-bs-theme',
            e.matches ? 'dark' : 'light'
          )
        })
      }

      document.addEventListener('astro:before-preparation', () => {
        console.log('Layout:astro:before-preparation')
      })
      document.addEventListener('astro:after-preparation', () => {
        console.log('Layout:astro:after-preparation')
      })
      document.addEventListener('astro:before-swap', () => {
        console.log('Layout:astro:before-swap')
        // const storedTheme = localStorage.getItem("theme") || 'light'
        // document.documentElement.setAttribute("data-bs-theme", storedTheme)
      })
      document.addEventListener('astro:after-swap', () => {
        console.log('Layout:astro:after-swap')
        // themeCheck()
      })
      document.addEventListener('astro:page-load', () => {
        // const storedTheme = localStorage.getItem("theme") || 'light'
        // themeCheck()
        // document.documentElement.setAttribute("data-bs-theme", storedTheme)
        // console.log("Layout:astro:page-load", storedTheme)
        themeCheck()
      })

      document.addEventListener(
        'astro:page-load',
        () => {
          // themeCheck()
          // const storedTheme = localStorage.getItem("theme") || 'light'
          // document.getElementById('app-localstorage-theme')!.innerHTML = localStorage.getItem("theme")!

          // document.documentElement.setAttribute("data-bs-theme", storedTheme)
          console.log('Layout:astro:page-load:once')
        },
        { once: true }
      )
    </script>
    <style is:global></style>
  </body>
</html>

